<!-- A Relax NG schema for network interfaces -->
<grammar xmlns="http://relaxng.org/ns/structure/1.0"
         datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <start>
    <choice>
      <ref name="ethernet-interface"/>
      <ref name="bridge-interface"/>
      <ref name="bond-interface"/>
    </choice>
  </start>

  <!--
       FIXME: How do we handle VLAN's ? Should they be their own interface
       or should we treat them as an option on the base interface ?  For
       example, for vlan eth0.42, it would make sense to make that part of
       the definition of the eth0 interface.
  -->

  <!--
       Ethernet adapter
  -->
  <define name="basic-ethernet-content">
    <attribute name="type">
      <value>ethernet</value>
    </attribute>
    <ref name="basic-attrs"/>
    <!-- If no MAC is given when the interface is defined, it is determined
         by using the device name.
         FIXME: What if device name and MAC don't specify the same NIC ? -->
    <optional>
      <element name="mac">
        <attribute name="address"><ref name="mac-addr"/></attribute>
      </element>
    </optional>
    <!-- FIXME: Allow (some) ethtool options -->
  </define>

  <!-- Ethernet adapter without IP addressing, e.g. for a bridge -->
  <define name="bare-ethernet-interface">
    <element name="interface">
      <ref name="basic-ethernet-content"/>
    </element>
  </define>

  <define name="ethernet-interface">
    <element name="interface">
      <ref name="startmode"/>
      <ref name="basic-ethernet-content"/>
      <ref name="interface-addressing"/>
    </element>
  </define>

  <!--
       Bridges
  -->
  <define name="bridge-interface">
    <element name="interface">
      <attribute name="type">
        <value>bridge</value>
      </attribute>
      <ref name="startmode"/>
      <ref name="basic-attrs"/>
      <element name="bridge">
        <optional>
          <attribute name="stp">
            <ref name="on-or-off"/>
          </attribute>
        </optional>
        <oneOrMore>
          <ref name="bare-ethernet-interface"/>
        </oneOrMore>
      </element>
    </element>
  </define>
  <!-- Jim Fehlig would like support for other bridge attributes, in
       particular hellotime, forwarddelay, and maxage
  -->

  <!--
      Bonds
  -->
  <define name="bond-interface">
    <element name="interface">
      <attribute name="type">
        <value>bond</value>
      </attribute>
      <ref name="startmode"/>
      <ref name="basic-attrs"/>
      <element name="bond">
        <interleave>
          <optional>
            <attribute name="mode">
              <choice>
                <value>balance-rr</value>
                <value>active-backup</value>
                <value>balance-xor</value>
                <value>broadcast</value>
                <value>802.3ad</value>
                <value>balance-tlb</value>
                <value>balance-alb</value>
              </choice>
            </attribute>
          </optional>
          <!-- FIXME: Add the 32k other options for bonding as needed -->
          <optional>
            <!-- Only for active-backup mode -->
            <attribute name="primary">
              <ref name="device-name"/>
            </attribute>
          </optional>
        </interleave>
        <oneOrMore>
          <!-- The slave interfaces -->
          <ref name="bare-ethernet-interface"/>
        </oneOrMore>
        <ref name="interface-addressing"/>
      </element>
    </element>
  </define>

  <!-- Basic attributes for all interface types -->
  <define name="basic-attrs">
    <!-- The device name, like eth0 or br2 -->
    <element name="name"><ref name="device-name"/></element>
    <!-- UUID is optional when creating an interface. If none is provided
         in the original definition of the interface, one will be
         created.

         FIXME: Where are we goingto store the UUID ? For ifcfg, we can
         store it in dummy variables, like NETCF_UUID in the ifcfg
         script. No idea where to put it on debian - will probably need to
         store it in some specially formatted comment.
    -->
    <optional>
      <element name="uuid"><ref name="UUID"/></element>
    </optional>
    <optional>
      <element name="mtu">
        <attribute name="size"><ref name="unsigned-int"/></attribute>
      </element>
    </optional>
  </define>

  <define name="startmode">
    <attribute name="startmode">
      <choice>
        <value>onboot</value>
        <value>none</value>
        <value>hotplug</value>
        <!-- Jim Fehlig lists the following that SuSe supports:
             manual, ifplug, nfsroot -->
      </choice>
    </attribute>
  </define>

  <!-- Assignment of IP address to an interface -->
  <define name="interface-addressing">
    <choice>
      <element name="dhcp">
        <optional>
          <attribute name="peerdns">
            <ref name="yes-or-no"/>
          </attribute>
        </optional>
      </element>
      <!-- FIXME: This format should be good enough for IPv4 and IPv6, i.e.

           ipaddr="192.168.0.5/24"
           ipaddr="2001:DB8:ABCD::1/64"

           but will cause some backend pain
      -->
      <group>
        <element name="ip">
          <optional>
            <attribute name="address"><ref name="ip-mask"/></attribute>
          </optional>
        </element>
        <optional>
          <element name="route">
            <attribute name="gateway"><ref name="ip-addr"/></attribute>
          </element>
        </optional>
      </group>
    </choice>
  </define>
  <!-- Jim Fehlig (<jfehlig@novell.com>) suggest the
       following additions to DHCP:

       WRT dhcp element, would it make sense to consider hostname (hostname
       to send to server) and if to change the local hostname to the
       hostname delivered via dhcp?  E.g.  hostname="foo" (default
       `hostname`) sethostname

       Also route:
         setrouting (default "yes")
         setdefaultroute (default "yes")

       and NIS:
         nis (default "yes")
         setnisdomain (default "yes")

       What about dhcpv6?  A separate <dhcp6 /> element?
  -->

  <!-- Jim Fehlig suggest adding static routing info

       As for routing info, how about a separate route element:

       <route gateway="192.168.0.1" /> # destination=default
       <route destination="default" gateway="192.168.0.1" />
       <route destination="10.0.0.0/8" gateway="192.168.0.2" />
       <route destination="2001:DB8:C::/64" gateway="2001:DB8:C::1" />
       <route destination="2001:DB8::/32"> # unrecheable route (loopback)

       It would perhaps make sense to use iproute2 names, that is prefix
       instead of destination and nexthop instead of gateway.
  -->

  <!-- Auxiliary definitions -->
  <define name="on-or-off">
    <choice>
      <value>on</value>
      <value>off</value>
    </choice>
  </define>

  <define name="yes-or-no">
    <choice>
      <value>yes</value>
      <value>no</value>
    </choice>
  </define>

  <!-- Type library -->

  <define name='unsigned-int'>
    <data type='unsignedInt'>
      <param name="pattern">[0-9]+</param>
    </data>
  </define>

  <define name='device-name'>
    <data type='string'>
      <param name="pattern">[a-zA-Z0-9_\.\-:/]+</param>
    </data>
  </define>

  <define name='UUID'>
    <choice>
      <data type='string'>
        <param name="pattern">[a-fA-F0-9]{32}</param>
      </data>
      <data type='string'>
        <param name="pattern">[a-fA-F0-9]{8}\-([a-fA-F0-9]{4}\-){3}[a-fA-F0-9]{12}</param>
      </data>
    </choice>
  </define>

  <define name='mac-addr'>
    <data type='string'>
      <param name="pattern">([a-fA-F0-9]{2}:){5}[a-fA-F0-9]{2}</param>
    </data>
  </define>

  <define name='ip-addr'>
    <data type='string'>
      <param name="pattern">([0-2]?[0-9]?[0-9]\.){3}[0-2]?[0-9]?[0-9]</param>
    </data>
  </define>

  <define name='ip-mask'>
    <data type='string'>
      <param name="pattern">([0-2]?[0-9]?[0-9]\.){3}[0-2]?[0-9]?[0-9](/[0-9][0-9]?)?</param>
    </data>
  </define>

</grammar>
